# coding: utf-8

"""
    Adzerk Decision API

    Adzerk Decision API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from adzerk_decision_sdk.configuration import Configuration


class PricingData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'price': 'float',
        'clear_price': 'float',
        'revenue': 'float',
        'rate_type': 'int',
        'e_cpm': 'float'
    }

    attribute_map = {
        'price': 'price',
        'clear_price': 'clearPrice',
        'revenue': 'revenue',
        'rate_type': 'rateType',
        'e_cpm': 'eCPM'
    }

    def __init__(self, price=None, clear_price=None, revenue=None, rate_type=None, e_cpm=None, local_vars_configuration=None):  # noqa: E501
        """PricingData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._price = None
        self._clear_price = None
        self._revenue = None
        self._rate_type = None
        self._e_cpm = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if clear_price is not None:
            self.clear_price = clear_price
        if revenue is not None:
            self.revenue = revenue
        if rate_type is not None:
            self.rate_type = rate_type
        if e_cpm is not None:
            self.e_cpm = e_cpm

    @property
    def price(self):
        """Gets the price of this PricingData.  # noqa: E501


        :return: The price of this PricingData.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PricingData.


        :param price: The price of this PricingData.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def clear_price(self):
        """Gets the clear_price of this PricingData.  # noqa: E501


        :return: The clear_price of this PricingData.  # noqa: E501
        :rtype: float
        """
        return self._clear_price

    @clear_price.setter
    def clear_price(self, clear_price):
        """Sets the clear_price of this PricingData.


        :param clear_price: The clear_price of this PricingData.  # noqa: E501
        :type: float
        """

        self._clear_price = clear_price

    @property
    def revenue(self):
        """Gets the revenue of this PricingData.  # noqa: E501


        :return: The revenue of this PricingData.  # noqa: E501
        :rtype: float
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this PricingData.


        :param revenue: The revenue of this PricingData.  # noqa: E501
        :type: float
        """

        self._revenue = revenue

    @property
    def rate_type(self):
        """Gets the rate_type of this PricingData.  # noqa: E501


        :return: The rate_type of this PricingData.  # noqa: E501
        :rtype: int
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this PricingData.


        :param rate_type: The rate_type of this PricingData.  # noqa: E501
        :type: int
        """

        self._rate_type = rate_type

    @property
    def e_cpm(self):
        """Gets the e_cpm of this PricingData.  # noqa: E501


        :return: The e_cpm of this PricingData.  # noqa: E501
        :rtype: float
        """
        return self._e_cpm

    @e_cpm.setter
    def e_cpm(self, e_cpm):
        """Sets the e_cpm of this PricingData.


        :param e_cpm: The e_cpm of this PricingData.  # noqa: E501
        :type: float
        """

        self._e_cpm = e_cpm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PricingData):
            return True

        return self.to_dict() != other.to_dict()
