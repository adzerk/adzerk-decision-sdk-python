"""
    Adzerk Decision API

    Adzerk Decision API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from adzerk_decision_sdk.api_client import ApiClient, Endpoint as _Endpoint
from adzerk_decision_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from adzerk_decision_sdk.model.consent_request import ConsentRequest


class UserdbApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __add_custom_properties(
            self,
            network_id,
            user_key,
            **kwargs
        ):
            """add_custom_properties  # noqa: E501

            Add Custom Properties to a User  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_custom_properties(network_id, user_key, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id
                user_key (str): The User's UserDB Key

            Keyword Args:
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            kwargs['user_key'] = \
                user_key
            return self.call_with_http_info(**kwargs)

        self.add_custom_properties = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/udb/{networkId}/custom',
                'operation_id': 'add_custom_properties',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'user_key',
                    'body',
                ],
                'required': [
                    'network_id',
                    'user_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'user_key':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                    'user_key': 'userKey',
                },
                'location_map': {
                    'network_id': 'path',
                    'user_key': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/gif'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__add_custom_properties
        )

        def __add_interests(
            self,
            network_id,
            user_key,
            interest,
            **kwargs
        ):
            """add_interests  # noqa: E501

            Add Interests to a User  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_interests(network_id, user_key, interest, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id
                user_key (str): The User's UserDB Key
                interest (str): Comma Seperated list of interests

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            kwargs['user_key'] = \
                user_key
            kwargs['interest'] = \
                interest
            return self.call_with_http_info(**kwargs)

        self.add_interests = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/udb/{networkId}/interest/i.gif',
                'operation_id': 'add_interests',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'user_key',
                    'interest',
                ],
                'required': [
                    'network_id',
                    'user_key',
                    'interest',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'user_key':
                        (str,),
                    'interest':
                        (str,),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                    'user_key': 'userKey',
                    'interest': 'interest',
                },
                'location_map': {
                    'network_id': 'path',
                    'user_key': 'query',
                    'interest': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/gif'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__add_interests
        )

        def __add_retargeting_segment(
            self,
            network_id,
            advertiser_id,
            retargeting_segment_id,
            user_key,
            **kwargs
        ):
            """add_retargeting_segment  # noqa: E501

            Add User to a Retargeting Segment  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.add_retargeting_segment(network_id, advertiser_id, retargeting_segment_id, user_key, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id
                advertiser_id (int): The Advertiser's ID
                retargeting_segment_id (int): The Segment's ID
                user_key (str): The User's UserDB Key

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            kwargs['advertiser_id'] = \
                advertiser_id
            kwargs['retargeting_segment_id'] = \
                retargeting_segment_id
            kwargs['user_key'] = \
                user_key
            return self.call_with_http_info(**kwargs)

        self.add_retargeting_segment = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/udb/{networkId}/rt/{advertiserId}/{retargetingSegmentId}/i.gif',
                'operation_id': 'add_retargeting_segment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'advertiser_id',
                    'retargeting_segment_id',
                    'user_key',
                ],
                'required': [
                    'network_id',
                    'advertiser_id',
                    'retargeting_segment_id',
                    'user_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'advertiser_id':
                        (int,),
                    'retargeting_segment_id':
                        (int,),
                    'user_key':
                        (str,),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                    'advertiser_id': 'advertiserId',
                    'retargeting_segment_id': 'retargetingSegmentId',
                    'user_key': 'userKey',
                },
                'location_map': {
                    'network_id': 'path',
                    'advertiser_id': 'path',
                    'retargeting_segment_id': 'path',
                    'user_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/gif'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__add_retargeting_segment
        )

        def __forget(
            self,
            network_id,
            user_key,
            **kwargs
        ):
            """forget  # noqa: E501

            Forget User  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.forget(network_id, user_key, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id
                user_key (str): The User's UserDB Key

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            kwargs['user_key'] = \
                user_key
            return self.call_with_http_info(**kwargs)

        self.forget = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/udb/{networkId}',
                'operation_id': 'forget',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'user_key',
                ],
                'required': [
                    'network_id',
                    'user_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'user_key':
                        (str,),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                    'user_key': 'userKey',
                },
                'location_map': {
                    'network_id': 'path',
                    'user_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__forget
        )

        def __gdpr_consent(
            self,
            network_id,
            **kwargs
        ):
            """gdpr_consent  # noqa: E501

            GDPR Consent  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.gdpr_consent(network_id, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id

            Keyword Args:
                consent_request (ConsentRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            return self.call_with_http_info(**kwargs)

        self.gdpr_consent = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/udb/{networkId}/consent',
                'operation_id': 'gdpr_consent',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'consent_request',
                ],
                'required': [
                    'network_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'consent_request':
                        (ConsentRequest,),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                },
                'location_map': {
                    'network_id': 'path',
                    'consent_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/gif'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__gdpr_consent
        )

        def __ip_override(
            self,
            network_id,
            user_key,
            ip,
            **kwargs
        ):
            """ip_override  # noqa: E501

            IP Address Override  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.ip_override(network_id, user_key, ip, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id
                user_key (str): The User's UserDB Key
                ip (str): This is the IP to exclude

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            kwargs['user_key'] = \
                user_key
            kwargs['ip'] = \
                ip
            return self.call_with_http_info(**kwargs)

        self.ip_override = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/udb/{networkId}/ip/i.gif',
                'operation_id': 'ip_override',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'user_key',
                    'ip',
                ],
                'required': [
                    'network_id',
                    'user_key',
                    'ip',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'user_key':
                        (str,),
                    'ip':
                        (str,),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                    'user_key': 'userKey',
                    'ip': 'ip',
                },
                'location_map': {
                    'network_id': 'path',
                    'user_key': 'query',
                    'ip': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/gif'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__ip_override
        )

        def __match_user(
            self,
            network_id,
            user_key,
            partner_id,
            user_id,
            **kwargs
        ):
            """match_user  # noqa: E501

            User Matching  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.match_user(network_id, user_key, partner_id, user_id, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id
                user_key (str): The User's UserDB Key
                partner_id (int): The ID of the RTB provider in Adzerk. Contact Support if you don't have the ID.
                user_id (int): This is the UserID the individual RTB provider has of the user. This is NOT the UserDB userkey.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            kwargs['user_key'] = \
                user_key
            kwargs['partner_id'] = \
                partner_id
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.match_user = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/udb/{networkId}/sync/i.gif',
                'operation_id': 'match_user',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'user_key',
                    'partner_id',
                    'user_id',
                ],
                'required': [
                    'network_id',
                    'user_key',
                    'partner_id',
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'user_key':
                        (str,),
                    'partner_id':
                        (int,),
                    'user_id':
                        (int,),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                    'user_key': 'userKey',
                    'partner_id': 'partnerId',
                    'user_id': 'userId',
                },
                'location_map': {
                    'network_id': 'path',
                    'user_key': 'query',
                    'partner_id': 'query',
                    'user_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/gif'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__match_user
        )

        def __opt_out(
            self,
            network_id,
            user_key,
            **kwargs
        ):
            """opt_out  # noqa: E501

            Opt-Out a User  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.opt_out(network_id, user_key, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id
                user_key (str): The User's UserDB Key

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            kwargs['user_key'] = \
                user_key
            return self.call_with_http_info(**kwargs)

        self.opt_out = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/udb/{networkId}/optout/i.gif',
                'operation_id': 'opt_out',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'user_key',
                ],
                'required': [
                    'network_id',
                    'user_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'user_key':
                        (str,),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                    'user_key': 'userKey',
                },
                'location_map': {
                    'network_id': 'path',
                    'user_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/gif'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__opt_out
        )

        def __read(
            self,
            network_id,
            user_key,
            **kwargs
        ):
            """read  # noqa: E501

            Read a User's UserDB Record  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.read(network_id, user_key, async_req=True)
            >>> result = thread.get()

            Args:
                network_id (int): Your Network Id
                user_key (str): The User's UserDB Key

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['network_id'] = \
                network_id
            kwargs['user_key'] = \
                user_key
            return self.call_with_http_info(**kwargs)

        self.read = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/udb/{networkId}/read',
                'operation_id': 'read',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'user_key',
                ],
                'required': [
                    'network_id',
                    'user_key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (int,),
                    'user_key':
                        (str,),
                },
                'attribute_map': {
                    'network_id': 'networkId',
                    'user_key': 'userKey',
                },
                'location_map': {
                    'network_id': 'path',
                    'user_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__read
        )
